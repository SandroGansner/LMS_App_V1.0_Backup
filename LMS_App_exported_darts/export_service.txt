// lib/services/export_service.dart
import 'dart:io';
import 'package:syncfusion_flutter_xlsio/xlsio.dart' as xlsio;
import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import '../models/campaign.dart';
import '../models/expense.dart';
import '../models/purchase.dart';

class ExportService {
  // Export für Einkäufe – schreibt in das Application Documents Directory
  Future<void> exportPurchasesFancy(List<Purchase> purchases) async {
    if (purchases.isEmpty) {
      debugPrint("Keine Einkäufe vorhanden – Excel bleibt leer.");
      return;
    }
    final xlsio.Workbook workbook = xlsio.Workbook();
    final xlsio.Worksheet sheet = workbook.worksheets[0];
    sheet.name = 'Abrechnung';

    // Titelzeile mit Merge und Formatierung
    final xlsio.Range range1 = sheet.getRangeByName('A1:E1');
    range1.merge();
    range1.setText("Kreditkarten-Abrechnung");
    range1.cellStyle.bold = true;
    range1.cellStyle.fontSize = 16;
    range1.cellStyle.fontColor = '#FFFFFF';
    range1.cellStyle.backColor = '#F2213B';
    range1.cellStyle.hAlign = xlsio.HAlignType.center;

    final xlsio.Range range2 = sheet.getRangeByName('A2:E2');
    range2.merge();
    range2.setText("Lenzerheide Marketing-Support AG");
    range2.cellStyle.bold = true;
    range2.cellStyle.fontSize = 12;
    range2.cellStyle.backColor = '#F2213B';

    final xlsio.Range range3 = sheet.getRangeByName('A3:E3');
    range3.merge();
    range3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
    range3.cellStyle.bold = true;
    range3.cellStyle.fontSize = 12;
    range3.cellStyle.backColor = '#F2213B';

    // Headerzeile in Zeile 5
    int headerRowIndex = 5;
    final headers = [
      "Rechnungssteller",
      "Text",
      "Kontierung (KST Projekt)",
      "VAT",
      "BETRAG"
    ];
    for (int col = 0; col < headers.length; col++) {
      final cell = sheet.getRangeByIndex(headerRowIndex, col + 1);
      cell.setText(headers[col]);
      cell.cellStyle.bold = true;
      cell.cellStyle.fontColor = '#FFFFFF';
      cell.cellStyle.backColor = '#F2213B';
      cell.cellStyle.hAlign = xlsio.HAlignType.center;
    }

    // Daten ab Zeile 6
    int dataStartRow = headerRowIndex + 1;
    for (int i = 0; i < purchases.length; i++) {
      final pur = purchases[i];
      int rowIndex = dataStartRow + i;
      sheet.getRangeByIndex(rowIndex, 1).setText(pur.invoiceIssuer);
      sheet.getRangeByIndex(rowIndex, 2).setText(pur.itemName);
      String kontierung = "6655 ${pur.costCenter} ${pur.projectNumber}";
      sheet.getRangeByIndex(rowIndex, 3).setText(kontierung);
      sheet.getRangeByIndex(rowIndex, 4).setText(pur.vatRate);
      sheet.getRangeByIndex(rowIndex, 5).setNumber(pur.price);
    }

    final List<int>? bytes = workbook.saveAsStream();
    workbook.dispose();
    if (bytes == null) {
      debugPrint("Excel encoding returned null – nichts zu speichern.");
      return;
    }

    // Verwende das Application Documents Directory
    final directory = await getApplicationDocumentsDirectory();
    final fileName =
        "Einkauf_erfasst_${DateTime.now().year}_${DateTime.now().month}.xlsx";
    final filePath = '${directory.path}/$fileName';
    final file = File(filePath);
    await file.writeAsBytes(bytes);
    debugPrint("Datei exportiert nach: $filePath");

    // Optional: Datei automatisch öffnen (zum Testen)
    OpenFile.open(filePath);
  }

  // Ähnliche Methoden implementierst du für exportExpensesFancy und exportCampaignsFancy
  Future<void> exportExpensesFancy(List<Expense> expenses) async {
    if (expenses.isEmpty) {
      debugPrint("Keine Spesen vorhanden – Excel bleibt leer.");
      return;
    }
    final xlsio.Workbook workbook = xlsio.Workbook();
    final xlsio.Worksheet sheet = workbook.worksheets[0];
    sheet.name = 'Abrechnung';

    final xlsio.Range r1 = sheet.getRangeByName('A1:E1');
    r1.merge();
    r1.setText("Spesen-Abrechnung");
    r1.cellStyle.bold = true;
    r1.cellStyle.fontSize = 16;
    r1.cellStyle.fontColor = '#FFFFFF';
    r1.cellStyle.backColor = '#F2213B';
    r1.cellStyle.hAlign = xlsio.HAlignType.center;

    final xlsio.Range r2 = sheet.getRangeByName('A2:E2');
    r2.merge();
    r2.setText("Lenzerheide Marketing-Support AG");
    r2.cellStyle.bold = true;
    r2.cellStyle.fontSize = 12;
    r2.cellStyle.backColor = '#F2213B';

    final xlsio.Range r3 = sheet.getRangeByName('A3:E3');
    r3.merge();
    r3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
    r3.cellStyle.bold = true;
    r3.cellStyle.fontSize = 12;
    r3.cellStyle.backColor = '#F2213B';

    int headerRow = 5;
    final headers = [
      "Mitarbeiter",
      "Kostenstelle / Projekt",
      "Datum",
      "Beschreibung",
      "BETRAG"
    ];
    for (int col = 0; col < headers.length; col++) {
      final cell = sheet.getRangeByIndex(headerRow, col + 1);
      cell.setText(headers[col]);
      cell.cellStyle.bold = true;
      cell.cellStyle.fontColor = '#FFFFFF';
      cell.cellStyle.backColor = '#F2213B';
      cell.cellStyle.hAlign = xlsio.HAlignType.center;
    }

    int dataStartRow = headerRow + 1;
    for (int i = 0; i < expenses.length; i++) {
      final exp = expenses[i];
      int rowIndex = dataStartRow + i;
      sheet.getRangeByIndex(rowIndex, 1).setText(exp.employeeName);
      sheet
          .getRangeByIndex(rowIndex, 2)
          .setText("${exp.costCenter} / ${exp.projectNumber}");
      sheet
          .getRangeByIndex(rowIndex, 3)
          .setText("${exp.date.year}-${exp.date.month}-${exp.date.day}");
      sheet.getRangeByIndex(rowIndex, 4).setText(exp.description);
      sheet.getRangeByIndex(rowIndex, 5).setNumber(exp.amount);
    }

    final List<int>? bytes = workbook.saveAsStream();
    workbook.dispose();
    if (bytes == null) {
      debugPrint("Excel encoding returned null – nichts zu speichern.");
      return;
    }

    final directory = await getApplicationDocumentsDirectory();
    final fileName =
        "Spesen_erfasst_${DateTime.now().year}_${DateTime.now().month}.xlsx";
    final filePath = '${directory.path}/$fileName';
    final file = File(filePath);
    await file.writeAsBytes(bytes);
    debugPrint("Spesen exportiert nach: $filePath");
    OpenFile.open(filePath);
  }

  Future<void> exportCampaignsFancy(List<Campaign> campaigns) async {
    if (campaigns.isEmpty) {
      debugPrint("Keine Kampagnen vorhanden – Excel bleibt leer.");
      return;
    }
    final xlsio.Workbook workbook = xlsio.Workbook();
    final xlsio.Worksheet sheet = workbook.worksheets[0];
    sheet.name = 'Abrechnung';

    final xlsio.Range r1 = sheet.getRangeByName('A1:F1');
    r1.merge();
    r1.setText("Kampagnen-Übersicht");
    r1.cellStyle.bold = true;
    r1.cellStyle.fontSize = 16;
    r1.cellStyle.fontColor = '#FFFFFF';
    r1.cellStyle.backColor = '#F2213B';
    r1.cellStyle.hAlign = xlsio.HAlignType.center;

    final xlsio.Range r2 = sheet.getRangeByName('A2:F2');
    r2.merge();
    r2.setText("Lenzerheide Marketing-Support AG");
    r2.cellStyle.bold = true;
    r2.cellStyle.fontSize = 12;
    r2.cellStyle.backColor = '#F2213B';

    final xlsio.Range r3 = sheet.getRangeByName('A3:F3');
    r3.merge();
    r3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
    r3.cellStyle.bold = true;
    r3.cellStyle.fontSize = 12;
    r3.cellStyle.backColor = '#F2213B';

    int headerRow = 4;
    final headers = [
      "Name",
      "Startdatum",
      "Enddatum",
      "Budget (CHF)",
      "Kostenstelle",
      "Meta-Konto"
    ];
    for (int col = 0; col < headers.length; col++) {
      final cell = sheet.getRangeByIndex(headerRow, col + 1);
      cell.setText(headers[col]);
      cell.cellStyle.bold = true;
      cell.cellStyle.fontColor = '#FFFFFF';
      cell.cellStyle.backColor = '#F2213B';
      cell.cellStyle.hAlign = xlsio.HAlignType.center;
    }

    int dataStartRow = headerRow + 1;
    for (int i = 0; i < campaigns.length; i++) {
      final camp = campaigns[i];
      int rowIndex = dataStartRow + i;
      sheet.getRangeByIndex(rowIndex, 1).setText(camp.name);
      sheet.getRangeByIndex(rowIndex, 2).setText(
          "${camp.startDate.year}-${camp.startDate.month}-${camp.startDate.day}");
      sheet.getRangeByIndex(rowIndex, 3).setText(
          "${camp.endDate.year}-${camp.endDate.month}-${camp.endDate.day}");
      sheet.getRangeByIndex(rowIndex, 4).setNumber(camp.adBudget);
      sheet.getRangeByIndex(rowIndex, 5).setText(camp.costCenter);
      sheet.getRangeByIndex(rowIndex, 6).setText(camp.metaAccount);
    }

    final List<int>? bytes = workbook.saveAsStream();
    workbook.dispose();
    if (bytes == null) {
      debugPrint("Excel encoding returned null – nichts zu speichern.");
      return;
    }

    final directory = await getApplicationDocumentsDirectory();
    final fileName =
        "Kampagnen_erfasst_${DateTime.now().year}_${DateTime.now().month}.xlsx";
    final filePath = '${directory.path}/$fileName';
    final file = File(filePath);
    await file.writeAsBytes(bytes);
    debugPrint("Kampagnen exportiert nach: $filePath");
    OpenFile.open(filePath);
  }
}
