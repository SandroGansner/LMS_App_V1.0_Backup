import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';
import '../models/purchase.dart';

class PurchaseService {
  Future<String> _getFilePath() async {
    final directory = await getApplicationDocumentsDirectory();
    final path = '${directory.path}/purchases.json';
    debugPrint("üìÇ Speicherpfad f√ºr purchases.json: $path");
    return path;
  }

  Future<List<Purchase>> getPurchases() async {
    try {
      final filePath = await _getFilePath();
      final file = File(filePath);
      if (await file.exists()) {
        final jsonString = await file.readAsString();
        final List<dynamic> jsonList = jsonDecode(jsonString);
        // Sicherstellen, dass die Liste ver√§nderbar ist
        return jsonList
            .map((json) => Purchase.fromJson(json))
            .toList(growable: true);
      }
      return <Purchase>[]; // Leere, ver√§nderbare Liste
    } catch (e) {
      debugPrint("‚ö†Ô∏è Fehler beim Laden der Eink√§ufe: $e");
      return <Purchase>[]; // Leere, ver√§nderbare Liste
    }
  }

  Future<void> addPurchase(Purchase purchase) async {
    try {
      final filePath = await _getFilePath();
      final file = File(filePath);
      List<Purchase> purchases = await getPurchases();
      purchases
          .add(purchase); // Sollte jetzt funktionieren, da Liste ver√§nderbar
      final jsonString = jsonEncode(purchases.map((p) => p.toJson()).toList());
      await file.writeAsString(jsonString);
      debugPrint(
          "‚úÖ Einkauf hinzugef√ºgt: ${purchase.itemName}, ${purchase.price} CHF, Karte: ${purchase.cardUsed}");
    } catch (e) {
      debugPrint("‚ö†Ô∏è Fehler beim Speichern des Einkaufs: $e");
    }
  }
}
