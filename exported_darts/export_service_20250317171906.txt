import 'dart:io';
import 'package:syncfusion_flutter_xlsio/xlsio.dart' as xlsio;
import 'package:flutter/foundation.dart';
import 'package:synchronized/synchronized.dart';
import '../models/purchase.dart';
import '../models/expense.dart';
import '../models/campaign.dart';
import '../constants/app_constants.dart';

class ExportService {
  // Monatstexte für Gruppierung
  static const List<String> _monthNames = [
    'Januar',
    'Februar',
    'März',
    'April',
    'Mai',
    'Juni',
    'Juli',
    'August',
    'September',
    'Oktober',
    'November',
    'Dezember'
  ];

  // Lock, um paralleles Schreiben in dieselbe Datei zu verhindern
  static final Lock _lock = Lock();

  // ──────────────────────────────────────────────────────────────────────────
  // 1) EINKÄUFE Export (ohne dispose(), damit kein unmodifiable list-Fehler)
  //    Keine Karte im Excel, Summe ganz rechts.
  // ──────────────────────────────────────────────────────────────────────────
  Future<void> exportPurchasesFancy({required List<Purchase> purchases}) async {
    if (purchases.isEmpty) {
      debugPrint("❌ Keine Einkäufe vorhanden – Export abgebrochen.");
      return;
    }

    debugPrint("🔄 Starte Gruppierung der Einkäufe...");
    // Gruppieren nach (Karte, Monat/Jahr)
    final Map<String, Map<String, List<Purchase>>> groupedPurchases = {};
    for (final p in purchases) {
      final monthYear = "${_monthNames[p.date.month - 1]} ${p.date.year}";
      groupedPurchases
          .putIfAbsent(p.cardUsed, () => {})
          .putIfAbsent(monthYear, () => [])
          .add(p);
    }

    debugPrint(
        "✅ Gruppierung abgeschlossen. Verarbeite ${groupedPurchases.length} Karten...");

    // Pro Karte und Monat/Jahr eine Excel-Datei
    for (final card in groupedPurchases.keys) {
      debugPrint("💳 Verwendete Karte (für Dateiname): $card");

      for (final monthYear in groupedPurchases[card]!.keys) {
        // Dateiname basierend auf Kartentyp
        String fileNamePrefix;
        if (card.toLowerCase().contains('cornercard')) {
          fileNamePrefix = 'cornercard';
        } else if (card.toLowerCase().contains('swisscard') &&
            card.toLowerCase().contains('euro')) {
          fileNamePrefix = 'swisscard_euro';
        } else if (card.toLowerCase().contains('swisscard')) {
          fileNamePrefix = 'swisscard_chf';
        } else {
          fileNamePrefix = 'purchases';
        }

        final fileName = "${fileNamePrefix}_$monthYear.xlsx";
        final filePath = '${await AppConstants.getExportPath()
}/$fileName';
        debugPrint("📂 Exportiere nach: $filePath");

        // Neues Workbook erstellen (kein dispose(), um Fehler zu umgehen)
        final workbook = xlsio.Workbook();
        final sheet = workbook.worksheets[0];

        // Kopfbereich
        final row1 = sheet.getRangeByName('A1:H1');
        row1.merge();
        row1.setText("Kreditkarten-Abrechnung");
        row1.cellStyle.bold = true;
        row1.cellStyle.fontSize = 16;
        row1.cellStyle.hAlign = xlsio.HAlignType.center;

        final row2 = sheet.getRangeByName('A2:H2');
        row2.merge();
        row2.setText("Anbieter: $card   Periode: $monthYear");
        row2.cellStyle.bold = true;
        row2.cellStyle.fontSize = 12;
        row2.cellStyle.hAlign = xlsio.HAlignType.center;

        final row3 = sheet.getRangeByName('A3:H3');
        row3.merge();
        row3.setText("Lenzerheide Marketing-Support AG");
        row3.cellStyle.bold = true;
        row3.cellStyle.fontSize = 12;
        row3.cellStyle.hAlign = xlsio.HAlignType.center;

        final row4 = sheet.getRangeByName('A4:H4');
        row4.merge();
        row4.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
        row4.cellStyle.bold = true;
        row4.cellStyle.fontSize = 12;
        row4.cellStyle.hAlign = xlsio.HAlignType.center;

        // Tabellen-Header (8 Spalten, Summe in Spalte H)
        int headerRow = 6;
        final headers = [
          "Artikel", // p.itemName
          "Rechnungssteller", // p.invoiceIssuer
          "Datum", // p.date
          "Mitarbeiter", // p.employee
          "KST", // p.costCenter
          "Projekt", // p.projectNumber
          "VAT", // p.vatRate
          "Betrag" // p.price
        ];

        for (int col = 0; col < headers.length; col++) {
          final cell = sheet.getRangeByIndex(headerRow, col + 1);
          cell.setText(headers[col]);
          cell.cellStyle.bold = true;
          cell.cellStyle.fontColor = '#FFFFFF';
          cell.cellStyle.backColor = '#F2213B';
          cell.cellStyle.hAlign = xlsio.HAlignType.center;
        }

        // Daten eintragen
        final dataStartRow = 7;
        final purchasesForCardAndMonth = groupedPurchases[card]![monthYear]!;
        debugPrint(
            "✍️ Verarbeite ${purchasesForCardAndMonth.length} Einkäufe für $card in $monthYear...");

        for (int i = 0; i < purchasesForCardAndMonth.length; i++) {
          final p = purchasesForCardAndMonth[i];
          final rowIndex = dataStartRow + i;

          // Spalte A: Artikel
          sheet.getRangeByIndex(rowIndex, 1).setText(p.itemName);

          // Spalte B: Rechnungssteller
          sheet.getRangeByIndex(rowIndex, 2).setText(p.invoiceIssuer);

          // Spalte C: Datum (z.B. 2025-03-17)
          final dateStr =
              "${p.date.year}-${p.date.month.toString().padLeft(2, '0')}-${p.date.day.toString().padLeft(2, '0')}";
          sheet.getRangeByIndex(rowIndex, 3).setText(dateStr);

          // Spalte D: Mitarbeiter
          sheet.getRangeByIndex(rowIndex, 4).setText(p.employee);

          // Spalte E: Kostenstelle
          sheet.getRangeByIndex(rowIndex, 5).setText(p.costCenter);

          // Spalte F: Projekt
          sheet.getRangeByIndex(rowIndex, 6).setText(p.projectNumber);

          // Spalte G: VAT
          sheet.getRangeByIndex(rowIndex, 7).setText(p.vatRate);

          // Spalte H: Betrag
          sheet.getRangeByIndex(rowIndex, 8).setNumber(p.price);
        }

        // Summenzeile unten in Spalte H
        final lastDataRow = dataStartRow + purchasesForCardAndMonth.length - 1;
        final sumRow = lastDataRow + 1;

        sheet.getRangeByIndex(sumRow, 7).setText("Total");
        sheet.getRangeByIndex(sumRow, 7).cellStyle.bold = true;
        final sumFormula = '=SUM(H7:H$lastDataRow)';
        sheet.getRangeByIndex(sumRow, 8).setFormula(sumFormula);
        sheet.getRangeByIndex(sumRow, 8).cellStyle.bold = true;

        // Spaltenbreite automatisch anpassen
        for (int col = 1; col <= 8; col++) {
          sheet.autoFitColumn(col);
        }

        // Ordner erstellen (falls nicht vorhanden)
        final dir = Directory(await AppConstants.getExportPath()
);
        if (!await dir.exists()) {
          await dir.create(recursive: true);
        }

        // Datei erstellen/überschreiben
        final file = File(filePath);
        await _lock.synchronized(() async {
          if (await file.exists()) {
            debugPrint(
                "📄 Datei existiert bereits, führe Aktualisierung durch...");
          }
          final bytes = workbook.saveAsStream();
          debugPrint("✅ Speichere Datei: $filePath");
          await file.writeAsBytes(bytes);
          debugPrint("✅ Einkäufe exportiert nach: $filePath");
        });

        // KEIN DISPOSE → Um den unmodifiable list-Fehler zu verhindern
      }
    }
  }

  // ──────────────────────────────────────────────────────────────────────────
  // 2) SPESEN Export (ohne dispose(), Summe ganz rechts, keine Karte)
  // ──────────────────────────────────────────────────────────────────────────
  Future<void> exportExpensesFancy(List<Expense> expenses) async {
    if (expenses.isEmpty) {
      debugPrint("Keine Spesen vorhanden – Export abgebrochen.");
      return;
    }

    debugPrint("Starte Gruppierung der Spesen...");
    final Map<String, Map<String, List<Expense>>> groupedExpenses = {};
    for (final exp in expenses) {
      final cardUsed = exp.cardUsed ?? "Keine Karte"; // nur für Dateinamen
      final monthYear = "${_monthNames[exp.date.month - 1]} ${exp.date.year}";

      groupedExpenses
          .putIfAbsent(cardUsed, () => {})
          .putIfAbsent(monthYear, () => [])
          .add(exp);
    }

    debugPrint(
        "Gruppierung abgeschlossen. Verarbeite ${groupedExpenses.length} Karten...");
    for (final card in groupedExpenses.keys) {
      for (final monthYear in groupedExpenses[card]!.keys) {
        final fileName = "Expenses_${card}_$monthYear.xlsx";
        final filePath = '${await AppConstants.getExportPath()
}/$fileName';
        debugPrint("Exportiere Spesen nach: $filePath");

        final workbook = xlsio.Workbook();
        final sheet = workbook.worksheets[0];

        // Kopfbereich
        final row1 = sheet.getRangeByName('A1:E1');
        row1.merge();
        row1.setText("Spesen-Abrechnung");
        row1.cellStyle.bold = true;
        row1.cellStyle.fontSize = 16;
        row1.cellStyle.hAlign = xlsio.HAlignType.center;

        final row2 = sheet.getRangeByName('A2:E2');
        row2.merge();
        row2.setText("Lenzerheide Marketing-Support AG");
        row2.cellStyle.bold = true;
        row2.cellStyle.fontSize = 12;
        row2.cellStyle.hAlign = xlsio.HAlignType.center;

        final row3 = sheet.getRangeByName('A3:E3');
        row3.merge();
        row3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
        row3.cellStyle.bold = true;
        row3.cellStyle.fontSize = 12;
        row3.cellStyle.hAlign = xlsio.HAlignType.center;

        // Tabellen-Header
        final List<String> headers = [
          "Mitarbeiter",
          "Kostenstelle / Projekt",
          "Datum",
          "Beschreibung",
          "BETRAG CHF"
        ];
        int headerRow = 5;
        for (int col = 0; col < headers.length; col++) {
          final cell = sheet.getRangeByIndex(headerRow, col + 1);
          cell.setText(headers[col]);
          cell.cellStyle.bold = true;
          cell.cellStyle.fontColor = '#FFFFFF';
          cell.cellStyle.backColor = '#F2213B';
          cell.cellStyle.hAlign = xlsio.HAlignType.center;
        }

        // Daten eintragen
        int dataStartRow = 6;
        final expensesForCardAndMonth = groupedExpenses[card]![monthYear]!;
        debugPrint(
            "Verarbeite ${expensesForCardAndMonth.length} Spesen für $card in $monthYear...");

        for (int i = 0; i < expensesForCardAndMonth.length; i++) {
          final exp = expensesForCardAndMonth[i];
          final rowIndex = dataStartRow + i;

          // Spalte A: Mitarbeiter
          sheet.getRangeByIndex(rowIndex, 1).setText(exp.employeeName);

          // Spalte B: Kostenstelle / Projekt
          sheet
              .getRangeByIndex(rowIndex, 2)
              .setText("${exp.costCenter} / ${exp.projectNumber}");

          // Spalte C: Datum
          final dateStr =
              "${exp.date.year}-${exp.date.month.toString().padLeft(2, '0')}-${exp.date.day.toString().padLeft(2, '0')}";
          sheet.getRangeByIndex(rowIndex, 3).setText(dateStr);

          // Spalte D: Beschreibung
          sheet.getRangeByIndex(rowIndex, 4).setText(exp.description);

          // Spalte E: Betrag
          sheet.getRangeByIndex(rowIndex, 5).setNumber(exp.amount);
        }

        // Summenzeile in Spalte E
        final lastDataRow = dataStartRow + expensesForCardAndMonth.length - 1;
        final sumRow = lastDataRow + 1;
        sheet.getRangeByIndex(sumRow, 4).setText("Total");
        sheet.getRangeByIndex(sumRow, 4).cellStyle.bold = true;
        final sumFormula = '=SUM(E6:E$lastDataRow)';
        sheet.getRangeByIndex(sumRow, 5).setFormula(sumFormula);
        sheet.getRangeByIndex(sumRow, 5).cellStyle.bold = true;

        // Auto-fit columns
        for (int i = 1; i <= 5; i++) {
          sheet.autoFitColumn(i);
        }

        // Ordner erstellen, falls nicht vorhanden
        final dir = Directory(await AppConstants.getExportPath()
);
        if (!await dir.exists()) {
          await dir.create(recursive: true);
        }

        final file = File(filePath);
        await _lock.synchronized(() async {
          if (await file.exists()) {
            debugPrint(
                "📄 Datei existiert bereits, führe Aktualisierung durch...");
          }
          final bytes = workbook.saveAsStream();
          debugPrint("Speichere Datei: $filePath");
          await file.writeAsBytes(bytes);
          debugPrint("Spesen exportiert nach: $filePath");
        });

        // KEIN workbook.dispose() -> verhindert den Unmodifiable-Listen-Fehler
      }
    }
  }

  // ──────────────────────────────────────────────────────────────────────────
  // 3) KAMPAGNEN Export (keine Änderungen, wie gehabt)
  // ──────────────────────────────────────────────────────────────────────────
  Future<void> exportCampaignsFancy(List<Campaign> campaigns) async {
    if (campaigns.isEmpty) {
      debugPrint("Keine Kampagnen vorhanden – Export abgebrochen.");
      return;
    }

    debugPrint("Starte Gruppierung der Kampagnen...");
    final Map<String, List<Campaign>> groupedCampaigns = {};
    for (final c in campaigns) {
      final monthYear =
          "${_monthNames[c.startDate.month - 1]} ${c.startDate.year}";
      groupedCampaigns.putIfAbsent(monthYear, () => []).add(c);
    }

    debugPrint(
        "Gruppierung abgeschlossen. Verarbeite ${groupedCampaigns.length} Monate...");

    for (final monthYear in groupedCampaigns.keys) {
      final fileName = "Campaigns_$monthYear.xlsx";
      final filePath = '${await AppConstants.getExportPath()
}/$fileName';
      debugPrint("Exportiere Kampagnen nach: $filePath");

      final workbook = xlsio.Workbook();
      final sheet = workbook.worksheets[0];

      debugPrint("Erstelle Kopfbereich für $fileName...");
      final row1 = sheet.getRangeByName('A1:G1');
      row1.merge();
      row1.setText("Kampagnen-Übersicht");
      row1.cellStyle.bold = true;
      row1.cellStyle.fontSize = 16;
      row1.cellStyle.hAlign = xlsio.HAlignType.center;

      final row2 = sheet.getRangeByName('A2:G2');
      row2.merge();
      row2.setText("Lenzerheide Marketing-Support AG");
      row2.cellStyle.bold = true;
      row2.cellStyle.fontSize = 12;
      row2.cellStyle.hAlign = xlsio.HAlignType.center;

      final row3 = sheet.getRangeByName('A3:G3');
      row3.merge();
      row3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
      row3.cellStyle.bold = true;
      row3.cellStyle.fontSize = 12;
      row3.cellStyle.hAlign = xlsio.HAlignType.center;

      int headerRow = 4;
      final List<String> headers = [
        "Name",
        "Startdatum",
        "Enddatum",
        "Budget (CHF)",
        "Kostenstelle",
        "Meta-Konto"
      ];
      for (int col = 0; col < headers.length; col++) {
        final cell = sheet.getRangeByIndex(headerRow, col + 1);
        cell.setText(headers[col]);
        cell.cellStyle.bold = true;
        cell.cellStyle.fontColor = '#FFFFFF';
        cell.cellStyle.backColor = '#F2213B';
        cell.cellStyle.hAlign = xlsio.HAlignType.center;
      }

      int dataStartRow = 5;
      final campaignsForMonth = groupedCampaigns[monthYear]!;
      debugPrint(
          "Verarbeite ${campaignsForMonth.length} Kampagnen für $monthYear...");

      // Kampagnen eintragen
      for (int i = 0; i < campaignsForMonth.length; i++) {
        final c = campaignsForMonth[i];
        final rowIndex = dataStartRow + i;

        sheet.getRangeByIndex(rowIndex, 1).setText(c.name);
        sheet.getRangeByIndex(rowIndex, 2).setText(
            "${c.startDate.year}-${c.startDate.month.toString().padLeft(2, '0')}-${c.startDate.day.toString().padLeft(2, '0')}");
        sheet.getRangeByIndex(rowIndex, 3).setText(
            "${c.endDate.year}-${c.endDate.month.toString().padLeft(2, '0')}-${c.endDate.day.toString().padLeft(2, '0')}");
        sheet.getRangeByIndex(rowIndex, 4).setNumber(c.adBudget);
        sheet.getRangeByIndex(rowIndex, 5).setText(c.costCenter);
        sheet.getRangeByIndex(rowIndex, 6).setText(c.metaAccount);
      }

      // Spaltenbreite anpassen
      for (int i = 1; i <= 6; i++) {
        sheet.autoFitColumn(i);
      }

      // Ordner erstellen
      final dir = Directory(await AppConstants.getExportPath()
);
      if (!dir.existsSync()) {
        dir.createSync(recursive: true);
      }

      final file = File(filePath);
      await _lock.synchronized(() async {
        if (file.existsSync()) {
          debugPrint(
              "📄 Datei existiert bereits, führe Aktualisierung durch...");
        }
        final bytes = workbook.saveAsStream();
        debugPrint("Speichere Datei: $filePath");
        await file.writeAsBytes(bytes);
        debugPrint("Kampagnen exportiert nach: $filePath");
      });

      // KEIN workbook.dispose();  (verhindert unmodifiable-list-Fehler)
    }
  }
}
