import 'dart:io';
import 'package:syncfusion_flutter_xlsio/xlsio.dart' as xlsio;
import 'package:flutter/foundation.dart';
import '../models/purchase.dart';
import '../constants/app_constants.dart';

class ExportService {
  static const List<String> _monthNames = [
    'Januar',
    'Februar',
    'M√§rz',
    'April',
    'Mai',
    'Juni',
    'Juli',
    'August',
    'September',
    'Oktober',
    'November',
    'Dezember'
  ];

  Future<void> exportPurchasesFancy({required List<Purchase> purchases}) async {
    if (purchases.isEmpty) {
      debugPrint("‚ùå Keine Eink√§ufe vorhanden ‚Äì Export abgebrochen.");
      return;
    }

    debugPrint("üîÑ Starte Gruppierung der Eink√§ufe...");
    Map<String, Map<String, List<Purchase>>> groupedPurchases = {};
    for (var p in purchases) {
      String monthYear = "${_monthNames[p.date.month - 1]} ${p.date.year}";
      groupedPurchases
          .putIfAbsent(p.cardUsed, () => {})
          .putIfAbsent(monthYear, () => [])
          .add(p);
    }

    debugPrint(
        "‚úÖ Gruppierung abgeschlossen. Verarbeite ${groupedPurchases.length} Karten...");
    debugPrint("üîç Grupierte Karten: ${groupedPurchases.keys.toList()}");

    for (var card in groupedPurchases.keys) {
      debugPrint("üí≥ Verwendete Karte: $card");
      for (var monthYear in groupedPurchases[card]!.keys) {
        String fileNamePrefix;
        if (card.toLowerCase().contains('cornercard')) {
          fileNamePrefix = 'cornercard';
        } else if (card.toLowerCase().contains('swisscard') &&
            card.toLowerCase().contains('euro')) {
          fileNamePrefix = 'swisscard_euro';
        } else if (card.toLowerCase().contains('swisscard')) {
          fileNamePrefix = 'swisscard_chf';
        } else {
          fileNamePrefix = 'purchases';
        }
        final fileName = "${fileNamePrefix}_$monthYear.xlsx";
        final filePath = '${await AppConstants.getExportPath()
}/$fileName';
        debugPrint("üìÇ Exportiere nach: $filePath");

        // Neue Workbook erstellen
        final workbook = xlsio.Workbook();
        final sheet = workbook.worksheets[0];

        // Header setzen
        final xlsio.Range row1 = sheet.getRangeByName('A1:H1');
        row1.merge();
        row1.setText("Kreditkarten-Abrechnung");
        row1.cellStyle.bold = true;
        row1.cellStyle.fontSize = 16;
        row1.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row2 = sheet.getRangeByName('A2:H2');
        row2.merge();
        row2.setText("Anbieter: $card   Periode: $monthYear");
        row2.cellStyle.bold = true;
        row2.cellStyle.fontSize = 12;
        row2.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row3 = sheet.getRangeByName('A3:H3');
        row3.merge();
        row3.setText("Lenzerheide Marketing-Support AG");
        row3.cellStyle.bold = true;
        row3.cellStyle.fontSize = 12;
        row3.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row4 = sheet.getRangeByName('A4:H4');
        row4.merge();
        row4.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
        row4.cellStyle.bold = true;
        row4.cellStyle.fontSize = 12;
        row4.cellStyle.hAlign = xlsio.HAlignType.center;

        int headerRow = 6;
        final List<String> headers = [
          "Beleg",
          "Rechnungssteller",
          "Text",
          "Konto",
          "KST",
          "Projekt",
          "VAT",
          "BETRAG CHF"
        ];
        for (int col = 0; col < headers.length; col++) {
          final cell = sheet.getRangeByIndex(headerRow, col + 1);
          cell.setText(headers[col]);
          cell.cellStyle.bold = true;
          cell.cellStyle.fontColor = '#FFFFFF';
          cell.cellStyle.backColor = '#F2213B';
          cell.cellStyle.hAlign = xlsio.HAlignType.center;
        }

        // Daten schreiben
        int dataStartRow = 7;
        final purchasesForCardAndMonth = groupedPurchases[card]![monthYear]!;
        debugPrint(
            "‚úçÔ∏è Verarbeite ${purchasesForCardAndMonth.length} Eink√§ufe f√ºr $card in $monthYear...");
        for (int i = 0; i < purchasesForCardAndMonth.length; i++) {
          final p = purchasesForCardAndMonth[i];
          int rowIndex = dataStartRow + i;
          debugPrint("  - Schreibe: ${p.itemName}, ${p.price}, ${p.cardUsed}");
          sheet.getRangeByIndex(rowIndex, 1).setText(p.id);
          sheet.getRangeByIndex(rowIndex, 2).setText(p.invoiceIssuer);
          sheet.getRangeByIndex(rowIndex, 3).setText(p.itemName);
          sheet.getRangeByIndex(rowIndex, 4).setText(p.cardUsed);
          sheet.getRangeByIndex(rowIndex, 5).setText(p.costCenter);
          sheet.getRangeByIndex(rowIndex, 6).setText(p.projectNumber);
          sheet.getRangeByIndex(rowIndex, 7).setText(p.vatRate);
          sheet.getRangeByIndex(rowIndex, 8).setNumber(p.price);
        }

        final int lastDataRow =
            dataStartRow + purchasesForCardAndMonth.length - 1;
        final int sumRow = lastDataRow + 1;
        sheet.getRangeByIndex(sumRow, 7).setText("Total");
        sheet.getRangeByIndex(sumRow, 7).cellStyle.bold = true;
        final String sumFormula = '=SUM(H7:H$lastDataRow)';
        sheet.getRangeByIndex(sumRow, 8).setFormula(sumFormula);
        sheet.getRangeByIndex(sumRow, 8).cellStyle.bold = true;

        for (int i = 1; i <= 8; i++) {
          sheet.autoFitColumn(i);
        }

        // Verzeichnis erstellen, falls es nicht existiert
        final dir = Directory(await AppConstants.getExportPath()
);
        if (!await dir.exists()) {
          await dir.create(recursive: true);
          debugPrint(
              "üìÅ Export-Verzeichnis erstellt: ${await AppConstants.getExportPath()
}");
        }

        final bytes = workbook.saveAsStream();
        debugPrint("‚úÖ Speichere Datei: $filePath");
        await File(filePath).writeAsBytes(bytes);
        debugPrint("‚úÖ Eink√§ufe exportiert nach: $filePath");

        workbook.dispose();
      }
    }
  }
}
