import 'dart:io';
import 'package:syncfusion_flutter_xlsio/xlsio.dart' as xlsio;
import 'package:flutter/foundation.dart';
import 'package:open_file/open_file.dart';
import '../models/purchase.dart';
import '../models/expense.dart';
import '../models/campaign.dart';
import '../constants/app_constants.dart';

class ExportService {
  static const List<String> _monthNames = [
    'Januar',
    'Februar',
    'M√§rz',
    'April',
    'Mai',
    'Juni',
    'Juli',
    'August',
    'September',
    'Oktober',
    'November',
    'Dezember'
  ];

  Future<xlsio.Workbook> _loadOrCreateWorkbook(String filePath) async {
    final file = File(filePath);
    if (file.existsSync()) {
      final bytes = await file.readAsBytes();
      final workbook = xlsio.Workbook();
      workbook.worksheets[0].importList(bytes, 1, 1, false); // Daten laden
      return workbook;
    } else {
      return xlsio.Workbook();
    }
  }

  Future<void> exportPurchasesFancy({
    required List<Purchase> purchases,
    String anbieter = "GKB (CHF)",
    String periode = "Dez 24",
    String title = "Kreditkarten-Abrechnung",
  }) async {
    if (purchases.isEmpty) {
      debugPrint("‚ö†Ô∏è Keine Eink√§ufe vorhanden ‚Äì Export abgebrochen.");
      return;
    }

    debugPrint("üìÇ Starte Export-Prozess...");

    // Neues Workbook und Worksheet erstellen
    final xlsio.Workbook workbook = xlsio.Workbook();
    final xlsio.Worksheet sheet = workbook.worksheets[0];
    sheet.name = 'Abrechnung';

    // Kopfzeile definieren
    sheet.getRangeByName('A1').setText('Rechnungssteller');
    sheet.getRangeByName('B1').setText('Artikelname');
    sheet.getRangeByName('C1').setText('Kaufdatum');
    sheet.getRangeByName('D1').setText('Zahlungskarte');
    sheet.getRangeByName('E1').setText('Kostenstelle');
    sheet.getRangeByName('F1').setText('Projekt');
    sheet.getRangeByName('G1').setText('VAT');
    sheet.getRangeByName('H1').setText('BETRAG CHF');

    int row = 2;
    for (var purchase in purchases) {
      sheet.getRangeByName('A\$row').setText(purchase.vendor);
      sheet.getRangeByName('B\$row').setText(purchase.itemName);
      sheet.getRangeByName('C\$row').setText(purchase.purchaseDate.toString());
      sheet.getRangeByName('D\$row').setText(purchase.paymentCard);
      sheet.getRangeByName('E\$row').setText(purchase.costCenter);
      sheet.getRangeByName('F\$row').setText(purchase.project);
      sheet.getRangeByName('G\$row').setText(purchase.vat.toString());
      sheet.getRangeByName('H\$row').setText(purchase.amountCHF.toString());

      debugPrint(
          "‚úÖ Einkauf erfasst: \${purchase.itemName} - \${purchase.amountCHF} CHF");

      // Beleg separat speichern
      if (purchase.receiptPath != null) {
        await _saveReceiptFile(purchase.receiptPath!, purchase.purchaseDate);
      }
      row++;
    }

    // Datei speichern
    final exportDir = Directory(await AppConstants.getExportPath()
);
    if (!exportDir.existsSync()) {
      exportDir.createSync(recursive: true);
    }
    final String fileName =
        "Einkauf_erfasst_\${DateTime.now().year}_\${DateTime.now().month}.xlsx";
    final String filePath = "\${exportDir.path}/\$fileName";
    final List<int> bytes = workbook.saveAsStream();

    if (bytes.isEmpty) {
      debugPrint("‚ö†Ô∏è Fehler: Excel-Datei konnte nicht gespeichert werden!");
      return;
    }

    workbook.dispose();
    final File file = File(filePath)
      ..createSync(recursive: true)
      ..writeAsBytesSync(bytes);

    debugPrint("‚úÖ Einkauf exportiert nach: \$filePath");
    OpenFile.open(filePath);
  }

  Future<void> exportExpensesFancy(List<Expense> expenses) async {
    if (expenses.isEmpty) {
      debugPrint("Keine Spesen vorhanden ‚Äì Export abgebrochen.");
      return;
    }

    debugPrint("Starte Gruppierung der Spesen...");
    Map<String, Map<String, List<Expense>>> groupedExpenses = {};
    for (var exp in expenses) {
      String cardUsed = exp.cardUsed ?? "Keine Karte"; // Standardwert f√ºr null
      String monthYear = "${_monthNames[exp.date.month - 1]} ${exp.date.year}";
      groupedExpenses
          .putIfAbsent(cardUsed, () => {})
          .putIfAbsent(monthYear, () => [])
          .add(exp);
    }

    debugPrint(
        "Gruppierung abgeschlossen. Verarbeite ${groupedExpenses.length} Karten...");
    for (var card in groupedExpenses.keys) {
      for (var monthYear in groupedExpenses[card]!.keys) {
        final fileName = "Expenses_${card}_$monthYear.xlsx";
        final filePath = '${await AppConstants.getExportPath()
}\\$fileName';
        debugPrint("Exportiere Spesen nach: $filePath");

        final workbook = await _loadOrCreateWorkbook(filePath);
        final sheet = workbook.worksheets.count > 0
            ? workbook.worksheets[0]
            : workbook.worksheets.addWithName('Abrechnung');

        if (sheet.getRangeByName('A1').getText() == null) {
          debugPrint("Erstelle Kopfbereich f√ºr $fileName...");
          final xlsio.Range row1 = sheet.getRangeByName('A1:E1');
          row1.merge();
          row1.setText("Spesen-Abrechnung");
          row1.cellStyle.bold = true;
          row1.cellStyle.fontSize = 16;
          row1.cellStyle.hAlign = xlsio.HAlignType.center;

          final xlsio.Range row2 = sheet.getRangeByName('A2:E2');
          row2.merge();
          row2.setText("Lenzerheide Marketing-Support AG");
          row2.cellStyle.bold = true;
          row2.cellStyle.fontSize = 12;
          row2.cellStyle.hAlign = xlsio.HAlignType.center;

          final xlsio.Range row3 = sheet.getRangeByName('A3:E3');
          row3.merge();
          row3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
          row3.cellStyle.bold = true;
          row3.cellStyle.fontSize = 12;
          row3.cellStyle.hAlign = xlsio.HAlignType.center;

          int headerRow = 5;
          final List<String> headers = [
            "Mitarbeiter",
            "Kostenstelle / Projekt",
            "Datum",
            "Beschreibung",
            "BETRAG CHF"
          ];
          for (int col = 0; col < headers.length; col++) {
            final cell = sheet.getRangeByIndex(headerRow, col + 1);
            cell.setText(headers[col]);
            cell.cellStyle.bold = true;
            cell.cellStyle.fontColor = '#FFFFFF';
            cell.cellStyle.backColor = '#F2213B';
            cell.cellStyle.hAlign = xlsio.HAlignType.center;
          }
        }

        int dataStartRow = sheet.getLastRow() + 1;
        if (dataStartRow <= 5) {
          dataStartRow = 6;
        }
        debugPrint("Datenstartzeile: $dataStartRow");

        final expensesForCardAndMonth = groupedExpenses[card]![monthYear]!;
        debugPrint(
            "Verarbeite ${expensesForCardAndMonth.length} Spesen f√ºr $card in $monthYear...");
        for (int i = 0; i < expensesForCardAndMonth.length; i++) {
          final exp = expensesForCardAndMonth[i];
          int rowIndex = dataStartRow + i;
          sheet.getRangeByIndex(rowIndex, 1).setText(exp.employeeName);
          sheet
              .getRangeByIndex(rowIndex, 2)
              .setText("${exp.costCenter} / ${exp.projectNumber}");
          sheet.getRangeByIndex(rowIndex, 3).setText(
              "${exp.date.year}-${exp.date.month.toString().padLeft(2, '0')}-${exp.date.day.toString().padLeft(2, '0')}");
          sheet.getRangeByIndex(rowIndex, 4).setText(exp.description);
          sheet.getRangeByIndex(rowIndex, 5).setNumber(exp.amount);
        }

        final int lastDataRow =
            dataStartRow + expensesForCardAndMonth.length - 1;
        final int sumRow = lastDataRow + 1;
        sheet.getRangeByIndex(sumRow, 4).setText("Total");
        sheet.getRangeByIndex(sumRow, 4).cellStyle.bold = true;
        final String sumFormula = '=SUM(E6:E$lastDataRow)';
        sheet.getRangeByIndex(sumRow, 5).setFormula(sumFormula);
        sheet.getRangeByIndex(sumRow, 5).cellStyle.bold = true;

        for (int i = 1; i <= 5; i++) {
          sheet.autoFitColumn(i);
        }

        final bytes = workbook.saveAsStream();
        debugPrint("Speichere Datei: $filePath");
        await File(filePath).writeAsBytes(bytes);
        debugPrint("Spesen exportiert nach: $filePath");
        OpenFile.open(filePath);
        workbook.dispose();
      }
    }
  }

  Future<void> exportCampaignsFancy(List<Campaign> campaigns) async {
    if (campaigns.isEmpty) {
      debugPrint("Keine Kampagnen vorhanden ‚Äì Export abgebrochen.");
      return;
    }

    debugPrint("Starte Gruppierung der Kampagnen...");
    Map<String, List<Campaign>> groupedCampaigns = {};
    for (var c in campaigns) {
      String monthYear =
          "${_monthNames[c.startDate.month - 1]} ${c.startDate.year}";
      groupedCampaigns.putIfAbsent(monthYear, () => []).add(c);
    }

    debugPrint(
        "Gruppierung abgeschlossen. Verarbeite ${groupedCampaigns.length} Monate...");
    for (var monthYear in groupedCampaigns.keys) {
      final fileName = "Campaigns_$monthYear.xlsx";
      final filePath = '${await AppConstants.getExportPath()
}\\$fileName';
      debugPrint("Exportiere Kampagnen nach: $filePath");

      final workbook = await _loadOrCreateWorkbook(filePath);
      final sheet = workbook.worksheets.count > 0
          ? workbook.worksheets[0]
          : workbook.worksheets.addWithName('Abrechnung');

      if (sheet.getRangeByName('A1').getText() == null) {
        debugPrint("Erstelle Kopfbereich f√ºr $fileName...");
        final xlsio.Range row1 = sheet.getRangeByName('A1:G1');
        row1.merge();
        row1.setText("Kampagnen-√úbersicht");
        row1.cellStyle.bold = true;
        row1.cellStyle.fontSize = 16;
        row1.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row2 = sheet.getRangeByName('A2:G2');
        row2.merge();
        row2.setText("Lenzerheide Marketing-Support AG");
        row2.cellStyle.bold = true;
        row2.cellStyle.fontSize = 12;
        row2.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row3 = sheet.getRangeByName('A3:G3');
        row3.merge();
        row3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
        row3.cellStyle.bold = true;
        row3.cellStyle.fontSize = 12;
        row3.cellStyle.hAlign = xlsio.HAlignType.center;

        int headerRow = 4;
        final List<String> headers = [
          "Name",
          "Startdatum",
          "Enddatum",
          "Budget (CHF)",
          "Kostenstelle",
          "Meta-Konto"
        ];
        for (int col = 0; col < headers.length; col++) {
          final cell = sheet.getRangeByIndex(headerRow, col + 1);
          cell.setText(headers[col]);
          cell.cellStyle.bold = true;
          cell.cellStyle.fontColor = '#FFFFFF';
          cell.cellStyle.backColor = '#F2213B';
          cell.cellStyle.hAlign = xlsio.HAlignType.center;
        }
      }

      int dataStartRow = sheet.getLastRow() + 1;
      if (dataStartRow <= 4) {
        dataStartRow = 5;
      }
      debugPrint("Datenstartzeile: $dataStartRow");

      final campaignsForMonth = groupedCampaigns[monthYear]!;
      debugPrint(
          "Verarbeite ${campaignsForMonth.length} Kampagnen f√ºr $monthYear...");
      for (int i = 0; i < campaignsForMonth.length; i++) {
        final c = campaignsForMonth[i];
        int rowIndex = dataStartRow + i;
        sheet.getRangeByIndex(rowIndex, 1).setText(c.name);
        sheet.getRangeByIndex(rowIndex, 2).setText(
            "${c.startDate.year}-${c.startDate.month.toString().padLeft(2, '0')}-${c.startDate.day.toString().padLeft(2, '0')}");
        sheet.getRangeByIndex(rowIndex, 3).setText(
            "${c.endDate.year}-${c.endDate.month.toString().padLeft(2, '0')}-${c.endDate.day.toString().padLeft(2, '0')}");
        sheet.getRangeByIndex(rowIndex, 4).setNumber(c.adBudget);
        sheet.getRangeByIndex(rowIndex, 5).setText(c.costCenter);
        sheet.getRangeByIndex(rowIndex, 6).setText(c.metaAccount);
      }

      for (int i = 1; i <= 6; i++) {
        sheet.autoFitColumn(i);
      }

      final bytes = workbook.saveAsStream();
      debugPrint("Speichere Datei: $filePath");
      await File(filePath).writeAsBytes(bytes);
      debugPrint("Kampagnen exportiert nach: $filePath");
      OpenFile.open(filePath);
      workbook.dispose();
    }
  }
}
