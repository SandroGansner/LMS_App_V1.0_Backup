import 'dart:io';
import 'package:syncfusion_flutter_xlsio/xlsio.dart' as xlsio;
import 'package:flutter/foundation.dart';
import 'package:open_file/open_file.dart';
import '../models/purchase.dart';
import '../models/expense.dart';
import '../models/campaign.dart';
import '../constants/app_constants.dart';

class ExportService {
  // Monatsnamen auf Deutsch
  static const List<String> _monthNames = [
    'Januar',
    'Februar',
    'März',
    'April',
    'Mai',
    'Juni',
    'Juli',
    'August',
    'September',
    'Oktober',
    'November',
    'Dezember'
  ];

  /// Hilfsfunktion zum Laden oder Erstellen eines Workbooks
  Future<xlsio.Workbook> _loadOrCreateWorkbook(String filePath) async {
    final file = File(filePath);
    if (file.existsSync()) {
      await file.readAsBytes();
      // The syncfusion_flutter_xlsio package does not support loading workbooks from bytes.
      // Returning a new workbook instead.
      debugPrint(
          "Bestehende Datei gefunden, aber Laden wird nicht unterstützt. Neues Workbook wird erstellt.");
      return xlsio.Workbook(); // Neues Workbook erstellen
    } else {
      return xlsio.Workbook(); // Neues Workbook erstellen
    }
  }

  /// Exportiert Einkäufe in separate Excel-Dateien pro Karte und Monat
  Future<void> exportPurchasesFancy({required List<Purchase> purchases}) async {
    if (purchases.isEmpty) {
      debugPrint("Keine Einkäufe vorhanden – Export abgebrochen.");
      return;
    }

    // Gruppierung nach Karte und Monat
    Map<String, Map<String, List<Purchase>>> groupedPurchases = {};
    for (var p in purchases) {
      String monthYear = "${_monthNames[p.date.month - 1]} ${p.date.year}";
      groupedPurchases
          .putIfAbsent(p.cardUsed, () => {})
          .putIfAbsent(monthYear, () => [])
          .add(p);
    }

    for (var card in groupedPurchases.keys) {
      for (var monthYear in groupedPurchases[card]!.keys) {
        final fileName = "${card}_$monthYear.xlsx";
        final filePath = '${await AppConstants.getExportPath()
}\\$fileName';
        final workbook = await _loadOrCreateWorkbook(filePath);
        final sheet = workbook.worksheets.count > 0
            ? workbook.worksheets[0]
            : workbook.worksheets.addWithName('Abrechnung');

        // Kopfbereich nur bei neuem Workbook setzen
        if (sheet.getRangeByName('A1').getText() == null) {
          final xlsio.Range row1 = sheet.getRangeByName('A1:H1');
          row1.merge();
          row1.setText("Kreditkarten-Abrechnung");
          row1.cellStyle.bold = true;
          row1.cellStyle.fontSize = 16;
          row1.cellStyle.hAlign = xlsio.HAlignType.center;

          final xlsio.Range row2 = sheet.getRangeByName('A2:H2');
          row2.merge();
          row2.setText("Anbieter: $card   Periode: $monthYear");
          row2.cellStyle.bold = true;
          row2.cellStyle.fontSize = 12;
          row2.cellStyle.hAlign = xlsio.HAlignType.center;

          final xlsio.Range row3 = sheet.getRangeByName('A3:H3');
          row3.merge();
          row3.setText("Lenzerheide Marketing-Support AG");
          row3.cellStyle.bold = true;
          row3.cellStyle.fontSize = 12;
          row3.cellStyle.hAlign = xlsio.HAlignType.center;

          final xlsio.Range row4 = sheet.getRangeByName('A4:H4');
          row4.merge();
          row4.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
          row4.cellStyle.bold = true;
          row4.cellStyle.fontSize = 12;
          row4.cellStyle.hAlign = xlsio.HAlignType.center;

          // Überschriften (Zeile 6)
          int headerRow = 6;
          final List<String> headers = [
            "Beleg",
            "Rechnungssteller",
            "Text",
            "Konto",
            "KST",
            "Projekt",
            "VAT",
            "BETRAG CHF"
          ];
          for (int col = 0; col < headers.length; col++) {
            final cell = sheet.getRangeByIndex(headerRow, col + 1);
            cell.setText(headers[col]);
            cell.cellStyle.bold = true;
            cell.cellStyle.fontColor = '#FFFFFF';
            cell.cellStyle.backColor = '#F2213B';
            cell.cellStyle.hAlign = xlsio.HAlignType.center;
          }
        }

        // Daten hinzufügen
        int dataStartRow = sheet.getLastRow() + 1;
        if (dataStartRow <= 6) {
          dataStartRow = 7; // Überspringe Header bei neuer Datei
        }

        final purchasesForCardAndMonth = groupedPurchases[card]![monthYear]!;
        for (int i = 0; i < purchasesForCardAndMonth.length; i++) {
          final p = purchasesForCardAndMonth[i];
          int rowIndex = dataStartRow + i;
          sheet.getRangeByIndex(rowIndex, 1).setText(p.id);
          sheet.getRangeByIndex(rowIndex, 2).setText(p.invoiceIssuer);
          sheet.getRangeByIndex(rowIndex, 3).setText(p.itemName);
          sheet.getRangeByIndex(rowIndex, 4).setText(p.cardUsed);
          sheet.getRangeByIndex(rowIndex, 5).setText(p.costCenter);
          sheet.getRangeByIndex(rowIndex, 6).setText(p.projectNumber);
          sheet.getRangeByIndex(rowIndex, 7).setText(p.vatRate);
          sheet.getRangeByIndex(rowIndex, 8).setNumber(p.price);
        }

        // Summenzeile aktualisieren
        final int lastDataRow =
            dataStartRow + purchasesForCardAndMonth.length - 1;
        final int sumRow = lastDataRow + 1;
        sheet.getRangeByIndex(sumRow, 7).setText("Total");
        sheet.getRangeByIndex(sumRow, 7).cellStyle.bold = true;
        final String sumFormula = '=SUM(H7:H$lastDataRow)';
        sheet.getRangeByIndex(sumRow, 8).setFormula(sumFormula);
        sheet.getRangeByIndex(sumRow, 8).cellStyle.bold = true;

        // AutoFit Spalten
        for (int i = 1; i <= 8; i++) {
          sheet.autoFitColumn(i);
        }

        // Speichern und öffnen
        final bytes = workbook.saveAsStream();
        await File(filePath).writeAsBytes(bytes);
        debugPrint("Einkäufe exportiert nach: $filePath");
        OpenFile.open(filePath);
        workbook.dispose();
      }
    }
  }

  /// Exportiert Spesen in separate Excel-Dateien pro Karte und Monat
  Future<void> exportExpensesFancy(List<Expense> expenses) async {
    if (expenses.isEmpty) {
      debugPrint("Keine Spesen vorhanden – Export abgebrochen.");
      return;
    }

    // Gruppierung nach Karte und Monat
    Map<String, Map<String, List<Expense>>> groupedExpenses = {};
    for (var exp in expenses) {
      String monthYear = "${_monthNames[exp.date.month - 1]} ${exp.date.year}";
      groupedExpenses
          .putIfAbsent(exp.cardUsed ?? "Keine Karte", () => {})
          .putIfAbsent(monthYear, () => [])
          .add(exp);
    }

    for (var card in groupedExpenses.keys) {
      for (var monthYear in groupedExpenses[card]!.keys) {
        final fileName = "Expenses_${card}_$monthYear.xlsx";
        final filePath = '${await AppConstants.getExportPath()
}\\$fileName';
        final workbook = await _loadOrCreateWorkbook(filePath);
        final sheet = workbook.worksheets.count > 0
            ? workbook.worksheets[0]
            : workbook.worksheets.addWithName('Abrechnung');

        // Kopfbereich nur bei neuem Workbook setzen
        if (sheet.getRangeByName('A1').getText() == null) {
          final xlsio.Range row1 = sheet.getRangeByName('A1:E1');
          row1.merge();
          row1.setText("Spesen-Abrechnung");
          row1.cellStyle.bold = true;
          row1.cellStyle.fontSize = 16;
          row1.cellStyle.hAlign = xlsio.HAlignType.center;

          final xlsio.Range row2 = sheet.getRangeByName('A2:E2');
          row2.merge();
          row2.setText("Lenzerheide Marketing-Support AG");
          row2.cellStyle.bold = true;
          row2.cellStyle.fontSize = 12;
          row2.cellStyle.hAlign = xlsio.HAlignType.center;

          final xlsio.Range row3 = sheet.getRangeByName('A3:E3');
          row3.merge();
          row3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
          row3.cellStyle.bold = true;
          row3.cellStyle.fontSize = 12;
          row3.cellStyle.hAlign = xlsio.HAlignType.center;

          // Überschriften (Zeile 5)
          int headerRow = 5;
          final List<String> headers = [
            "Mitarbeiter",
            "Kostenstelle / Projekt",
            "Datum",
            "Beschreibung",
            "BETRAG CHF"
          ];
          for (int col = 0; col < headers.length; col++) {
            final cell = sheet.getRangeByIndex(headerRow, col + 1);
            cell.setText(headers[col]);
            cell.cellStyle.bold = true;
            cell.cellStyle.fontColor = '#FFFFFF';
            cell.cellStyle.backColor = '#F2213B';
            cell.cellStyle.hAlign = xlsio.HAlignType.center;
          }
        }

        // Daten hinzufügen
        int dataStartRow = sheet.getLastRow() + 1;
        if (dataStartRow <= 5) {
          dataStartRow = 6; // Überspringe Header bei neuer Datei
        }

        final expensesForCardAndMonth = groupedExpenses[card]![monthYear]!;
        for (int i = 0; i < expensesForCardAndMonth.length; i++) {
          final exp = expensesForCardAndMonth[i];
          int rowIndex = dataStartRow + i;
          sheet.getRangeByIndex(rowIndex, 1).setText(exp.employeeName);
          sheet
              .getRangeByIndex(rowIndex, 2)
              .setText("${exp.costCenter} / ${exp.projectNumber}");
          sheet.getRangeByIndex(rowIndex, 3).setText(
              "${exp.date.year}-${exp.date.month.toString().padLeft(2, '0')}-${exp.date.day.toString().padLeft(2, '0')}");
          sheet.getRangeByIndex(rowIndex, 4).setText(exp.description);
          sheet.getRangeByIndex(rowIndex, 5).setNumber(exp.amount);
        }

        // Summenzeile aktualisieren
        final int lastDataRow =
            dataStartRow + expensesForCardAndMonth.length - 1;
        final int sumRow = lastDataRow + 1;
        sheet.getRangeByIndex(sumRow, 4).setText("Total");
        sheet.getRangeByIndex(sumRow, 4).cellStyle.bold = true;
        final String sumFormula = '=SUM(E6:E$lastDataRow)';
        sheet.getRangeByIndex(sumRow, 5).setFormula(sumFormula);
        sheet.getRangeByIndex(sumRow, 5).cellStyle.bold = true;

        // AutoFit Spalten
        for (int i = 1; i <= 5; i++) {
          sheet.autoFitColumn(i);
        }

        // Speichern und öffnen
        final bytes = workbook.saveAsStream();
        await File(filePath).writeAsBytes(bytes);
        debugPrint("Spesen exportiert nach: $filePath");
        OpenFile.open(filePath);
        workbook.dispose();
      }
    }
  }

  /// Exportiert Kampagnen in separate Excel-Dateien pro Monat
  Future<void> exportCampaignsFancy(List<Campaign> campaigns) async {
    if (campaigns.isEmpty) {
      debugPrint("Keine Kampagnen vorhanden – Export abgebrochen.");
      return;
    }

    // Gruppierung nach Monat (basierend auf Startdatum)
    Map<String, List<Campaign>> groupedCampaigns = {};
    for (var c in campaigns) {
      String monthYear =
          "${_monthNames[c.startDate.month - 1]} ${c.startDate.year}";
      groupedCampaigns.putIfAbsent(monthYear, () => []).add(c);
    }

    for (var monthYear in groupedCampaigns.keys) {
      final fileName = "Campaigns_$monthYear.xlsx";
      final filePath = '${await AppConstants.getExportPath()
}\\$fileName';
      final workbook = await _loadOrCreateWorkbook(filePath);
      final sheet = workbook.worksheets.count > 0
          ? workbook.worksheets[0]
          : workbook.worksheets.addWithName('Abrechnung');

      // Kopfbereich nur bei neuem Workbook setzen
      if (sheet.getRangeByName('A1').getText() == null) {
        final xlsio.Range row1 = sheet.getRangeByName('A1:G1');
        row1.merge();
        row1.setText("Kampagnen-Übersicht");
        row1.cellStyle.bold = true;
        row1.cellStyle.fontSize = 16;
        row1.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row2 = sheet.getRangeByName('A2:G2');
        row2.merge();
        row2.setText("Lenzerheide Marketing-Support AG");
        row2.cellStyle.bold = true;
        row2.cellStyle.fontSize = 12;
        row2.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row3 = sheet.getRangeByName('A3:G3');
        row3.merge();
        row3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
        row3.cellStyle.bold = true;
        row3.cellStyle.fontSize = 12;
        row3.cellStyle.hAlign = xlsio.HAlignType.center;

        // Überschriften (Zeile 4)
        int headerRow = 4;
        final List<String> headers = [
          "Name",
          "Startdatum",
          "Enddatum",
          "Budget (CHF)",
          "Kostenstelle",
          "Meta-Konto"
        ];
        for (int col = 0; col < headers.length; col++) {
          final cell = sheet.getRangeByIndex(headerRow, col + 1);
          cell.setText(headers[col]);
          cell.cellStyle.bold = true;
          cell.cellStyle.fontColor = '#FFFFFF';
          cell.cellStyle.backColor = '#F2213B';
          cell.cellStyle.hAlign = xlsio.HAlignType.center;
        }
      }

      // Daten hinzufügen
      int dataStartRow = sheet.getLastRow() + 1;
      if (dataStartRow <= 4) {
        dataStartRow = 5; // Überspringe Header bei neuer Datei
      }

      final campaignsForMonth = groupedCampaigns[monthYear]!;
      for (int i = 0; i < campaignsForMonth.length; i++) {
        final c = campaignsForMonth[i];
        int rowIndex = dataStartRow + i;
        sheet.getRangeByIndex(rowIndex, 1).setText(c.name);
        sheet.getRangeByIndex(rowIndex, 2).setText(
            "${c.startDate.year}-${c.startDate.month.toString().padLeft(2, '0')}-${c.startDate.day.toString().padLeft(2, '0')}");
        sheet.getRangeByIndex(rowIndex, 3).setText(
            "${c.endDate.year}-${c.endDate.month.toString().padLeft(2, '0')}-${c.endDate.day.toString().padLeft(2, '0')}");
        sheet.getRangeByIndex(rowIndex, 4).setNumber(c.adBudget);
        sheet.getRangeByIndex(rowIndex, 5).setText(c.costCenter);
        sheet.getRangeByIndex(rowIndex, 6).setText(c.metaAccount);
      }

      // AutoFit Spalten
      for (int i = 1; i <= 6; i++) {
        sheet.autoFitColumn(i);
      }

      // Speichern und öffnen
      final bytes = workbook.saveAsStream();
      await File(filePath).writeAsBytes(bytes);
      debugPrint("Kampagnen exportiert nach: $filePath");
      OpenFile.open(filePath);
      workbook.dispose();
    }
  }
}
