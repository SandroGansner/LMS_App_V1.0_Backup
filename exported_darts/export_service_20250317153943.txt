import 'dart:io';
import 'package:syncfusion_flutter_xlsio/xlsio.dart' as xlsio;
import 'package:flutter/foundation.dart';
import 'package:synchronized/synchronized.dart';
import '../models/purchase.dart';
import '../models/expense.dart';
import '../models/campaign.dart';
import '../constants/app_constants.dart';

class ExportService {
  static const List<String> _monthNames = [
    'Januar',
    'Februar',
    'M√§rz',
    'April',
    'Mai',
    'Juni',
    'Juli',
    'August',
    'September',
    'Oktober',
    'November',
    'Dezember'
  ];

  // Lock ensures no concurrent writes to the same file
  static final Lock _lock = Lock();

  //---------------------------------------------------------------------------
  // 1) Export Purchases Fancy
  //    - Always creates a fresh workbook
  //    - Overwrites any existing file
  //---------------------------------------------------------------------------
  Future<void> exportPurchasesFancy({required List<Purchase> purchases}) async {
    if (purchases.isEmpty) {
      debugPrint("‚ùå Keine Eink√§ufe vorhanden ‚Äì Export abgebrochen.");
      return;
    }

    debugPrint("üîÑ Starte Gruppierung der Eink√§ufe...");
    // Group purchases by cardUsed, then by month-year
    final Map<String, Map<String, List<Purchase>>> groupedPurchases = {};
    for (final p in purchases) {
      final monthYear = "${_monthNames[p.date.month - 1]} ${p.date.year}";
      groupedPurchases
          .putIfAbsent(p.cardUsed, () => {})
          .putIfAbsent(monthYear, () => [])
          .add(p);
    }

    debugPrint(
        "‚úÖ Gruppierung abgeschlossen. Verarbeite ${groupedPurchases.length} Karten...");
    // For each card and month, create a fresh workbook & file
    for (final card in groupedPurchases.keys) {
      debugPrint("üí≥ Verwendete Karte: $card");

      for (final monthYear in groupedPurchases[card]!.keys) {
        // Decide file prefix from card name
        String fileNamePrefix;
        if (card.toLowerCase().contains('cornercard')) {
          fileNamePrefix = 'cornercard';
        } else if (card.toLowerCase().contains('swisscard') &&
            card.toLowerCase().contains('euro')) {
          fileNamePrefix = 'swisscard_euro';
        } else if (card.toLowerCase().contains('swisscard')) {
          fileNamePrefix = 'swisscard_chf';
        } else {
          fileNamePrefix = 'purchases';
        }

        final fileName = "${fileNamePrefix}_$monthYear.xlsx";
        final filePath = '${await AppConstants.getExportPath()
}/$fileName';
        debugPrint("üìÇ Exportiere nach: $filePath");

        // Create a new workbook
        final workbook = xlsio.Workbook();
        final sheet = workbook.worksheets[0];

        // Set up fancy headers
        final xlsio.Range row1 = sheet.getRangeByName('A1:H1');
        row1.merge();
        row1.setText("Kreditkarten-Abrechnung");
        row1.cellStyle.bold = true;
        row1.cellStyle.fontSize = 16;
        row1.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row2 = sheet.getRangeByName('A2:H2');
        row2.merge();
        row2.setText("Anbieter: $card   Periode: $monthYear");
        row2.cellStyle.bold = true;
        row2.cellStyle.fontSize = 12;
        row2.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row3 = sheet.getRangeByName('A3:H3');
        row3.merge();
        row3.setText("Lenzerheide Marketing-Support AG");
        row3.cellStyle.bold = true;
        row3.cellStyle.fontSize = 12;
        row3.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row4 = sheet.getRangeByName('A4:H4');
        row4.merge();
        row4.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
        row4.cellStyle.bold = true;
        row4.cellStyle.fontSize = 12;
        row4.cellStyle.hAlign = xlsio.HAlignType.center;

        // Table headers
        int headerRow = 6;
        final List<String> headers = [
          "Beleg",
          "Rechnungssteller",
          "Text",
          "Konto",
          "KST",
          "Projekt",
          "VAT",
          "BETRAG CHF"
        ];
        for (int col = 0; col < headers.length; col++) {
          final cell = sheet.getRangeByIndex(headerRow, col + 1);
          cell.setText(headers[col]);
          cell.cellStyle.bold = true;
          cell.cellStyle.fontColor = '#FFFFFF'; // White text
          cell.cellStyle.backColor = '#F2213B'; // Red background
          cell.cellStyle.hAlign = xlsio.HAlignType.center;
        }

        // Write data rows
        final cardMonthPurchases = groupedPurchases[card]![monthYear]!;
        final dataStartRow = 7;
        debugPrint(
            "‚úçÔ∏è Verarbeite ${cardMonthPurchases.length} Eink√§ufe f√ºr $card in $monthYear...");

        for (int i = 0; i < cardMonthPurchases.length; i++) {
          final p = cardMonthPurchases[i];
          final rowIndex = dataStartRow + i;
          debugPrint("  - Schreibe: ${p.itemName}, ${p.price}, ${p.cardUsed}");

          sheet.getRangeByIndex(rowIndex, 1).setText(p.id);
          sheet.getRangeByIndex(rowIndex, 2).setText(p.invoiceIssuer);
          sheet.getRangeByIndex(rowIndex, 3).setText(p.itemName);
          sheet.getRangeByIndex(rowIndex, 4).setText(p.cardUsed);
          sheet.getRangeByIndex(rowIndex, 5).setText(p.costCenter);
          sheet.getRangeByIndex(rowIndex, 6).setText(p.projectNumber);
          sheet.getRangeByIndex(rowIndex, 7).setText(p.vatRate);
          sheet.getRangeByIndex(rowIndex, 8).setNumber(p.price);
        }

        // Add total row
        final lastDataRow = (dataStartRow + cardMonthPurchases.length) - 1;
        final sumRow = lastDataRow + 1;
        sheet.getRangeByIndex(sumRow, 7).setText("Total");
        sheet.getRangeByIndex(sumRow, 7).cellStyle.bold = true;
        final String sumFormula = '=SUM(H7:H$lastDataRow)';
        sheet.getRangeByIndex(sumRow, 8).setFormula(sumFormula);
        sheet.getRangeByIndex(sumRow, 8).cellStyle.bold = true;

        // Auto-fit columns
        for (int i = 1; i <= 8; i++) {
          sheet.autoFitColumn(i);
        }

        // Ensure export folder exists
        final dir = Directory(await AppConstants.getExportPath()
);
        if (!await dir.exists()) {
          await dir.create(recursive: true);
        }

        // Overwrite existing file
        final file = File(filePath);
        await _lock.synchronized(() async {
          if (await file.exists()) {
            debugPrint(
                "üìÑ Datei existiert bereits, f√ºhre Aktualisierung durch...");
          }
          final bytes = workbook.saveAsStream();
          debugPrint("‚úÖ Speichere Datei: $filePath");
          await file.writeAsBytes(bytes);
          debugPrint("‚úÖ Eink√§ufe exportiert nach: $filePath");
        });

        // Dispose workbook to free memory (no partial clearing)
        workbook.dispose();
      }
    }
  }

  //---------------------------------------------------------------------------
  // 2) Export Expenses Fancy
  //    - Same approach, always create fresh workbook, overwrite file
  //---------------------------------------------------------------------------
  Future<void> exportExpensesFancy(List<Expense> expenses) async {
    if (expenses.isEmpty) {
      debugPrint("Keine Spesen vorhanden ‚Äì Export abgebrochen.");
      return;
    }

    debugPrint("Starte Gruppierung der Spesen...");
    final Map<String, Map<String, List<Expense>>> groupedExpenses = {};
    for (final exp in expenses) {
      final cardUsed = exp.cardUsed ?? "Keine Karte";
      final monthYear = "${_monthNames[exp.date.month - 1]} ${exp.date.year}";

      groupedExpenses
          .putIfAbsent(cardUsed, () => {})
          .putIfAbsent(monthYear, () => [])
          .add(exp);
    }

    debugPrint(
        "Gruppierung abgeschlossen. Verarbeite ${groupedExpenses.length} Karten...");
    // For each card and month, create a fresh workbook
    for (final card in groupedExpenses.keys) {
      for (final monthYear in groupedExpenses[card]!.keys) {
        final fileName = "Expenses_${card}_$monthYear.xlsx";
        final filePath = '${await AppConstants.getExportPath()
}/$fileName';
        debugPrint("Exportiere Spesen nach: $filePath");

        final workbook = xlsio.Workbook();
        final sheet = workbook.worksheets[0];

        // Head section
        debugPrint("Erstelle Kopfbereich f√ºr $fileName...");
        final xlsio.Range row1 = sheet.getRangeByName('A1:E1');
        row1.merge();
        row1.setText("Spesen-Abrechnung");
        row1.cellStyle.bold = true;
        row1.cellStyle.fontSize = 16;
        row1.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row2 = sheet.getRangeByName('A2:E2');
        row2.merge();
        row2.setText("Lenzerheide Marketing-Support AG");
        row2.cellStyle.bold = true;
        row2.cellStyle.fontSize = 12;
        row2.cellStyle.hAlign = xlsio.HAlignType.center;

        final xlsio.Range row3 = sheet.getRangeByName('A3:E3');
        row3.merge();
        row3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
        row3.cellStyle.bold = true;
        row3.cellStyle.fontSize = 12;
        row3.cellStyle.hAlign = xlsio.HAlignType.center;

        // Table headers
        int headerRow = 5;
        final List<String> headers = [
          "Mitarbeiter",
          "Kostenstelle / Projekt",
          "Datum",
          "Beschreibung",
          "BETRAG CHF"
        ];
        for (int col = 0; col < headers.length; col++) {
          final cell = sheet.getRangeByIndex(headerRow, col + 1);
          cell.setText(headers[col]);
          cell.cellStyle.bold = true;
          cell.cellStyle.fontColor = '#FFFFFF';
          cell.cellStyle.backColor = '#F2213B';
          cell.cellStyle.hAlign = xlsio.HAlignType.center;
        }

        // Write data
        int dataStartRow = 6;
        final expensesForCardAndMonth = groupedExpenses[card]![monthYear]!;
        debugPrint(
            "Verarbeite ${expensesForCardAndMonth.length} Spesen f√ºr $card in $monthYear...");

        for (int i = 0; i < expensesForCardAndMonth.length; i++) {
          final exp = expensesForCardAndMonth[i];
          final rowIndex = dataStartRow + i;

          sheet.getRangeByIndex(rowIndex, 1).setText(exp.employeeName);
          sheet
              .getRangeByIndex(rowIndex, 2)
              .setText("${exp.costCenter} / ${exp.projectNumber}");
          sheet.getRangeByIndex(rowIndex, 3).setText(
              "${exp.date.year}-${exp.date.month.toString().padLeft(2, '0')}-${exp.date.day.toString().padLeft(2, '0')}");
          sheet.getRangeByIndex(rowIndex, 4).setText(exp.description);
          sheet.getRangeByIndex(rowIndex, 5).setNumber(exp.amount);
        }

        // Summation row
        final lastDataRow = dataStartRow + expensesForCardAndMonth.length - 1;
        final sumRow = lastDataRow + 1;
        sheet.getRangeByIndex(sumRow, 4).setText("Total");
        sheet.getRangeByIndex(sumRow, 4).cellStyle.bold = true;
        final String sumFormula = '=SUM(E6:E$lastDataRow)';
        sheet.getRangeByIndex(sumRow, 5).setFormula(sumFormula);
        sheet.getRangeByIndex(sumRow, 5).cellStyle.bold = true;

        // Auto-fit columns
        for (int i = 1; i <= 5; i++) {
          sheet.autoFitColumn(i);
        }

        // Ensure export folder exists
        final dir = Directory(await AppConstants.getExportPath()
);
        if (!await dir.exists()) {
          await dir.create(recursive: true);
        }

        // Overwrite any existing file
        final file = File(filePath);
        await _lock.synchronized(() async {
          if (await file.exists()) {
            debugPrint(
                "üìÑ Datei existiert bereits, f√ºhre Aktualisierung durch...");
          }
          final bytes = workbook.saveAsStream();
          debugPrint("Speichere Datei: $filePath");
          await file.writeAsBytes(bytes);
          debugPrint("Spesen exportiert nach: $filePath");
        });

        workbook.dispose();
      }
    }
  }

  //---------------------------------------------------------------------------
  // 3) Export Campaigns Fancy
  //---------------------------------------------------------------------------
  Future<void> exportCampaignsFancy(List<Campaign> campaigns) async {
    if (campaigns.isEmpty) {
      debugPrint("Keine Kampagnen vorhanden ‚Äì Export abgebrochen.");
      return;
    }

    debugPrint("Starte Gruppierung der Kampagnen...");
    final Map<String, List<Campaign>> groupedCampaigns = {};
    for (final c in campaigns) {
      final monthYear =
          "${_monthNames[c.startDate.month - 1]} ${c.startDate.year}";
      groupedCampaigns.putIfAbsent(monthYear, () => []).add(c);
    }

    debugPrint(
        "Gruppierung abgeschlossen. Verarbeite ${groupedCampaigns.length} Monate...");
    for (final monthYear in groupedCampaigns.keys) {
      final fileName = "Campaigns_$monthYear.xlsx";
      final filePath = '${await AppConstants.getExportPath()
}/$fileName';
      debugPrint("Exportiere Kampagnen nach: $filePath");

      final workbook = xlsio.Workbook();
      final sheet = workbook.worksheets[0];

      debugPrint("Erstelle Kopfbereich f√ºr $fileName...");
      final xlsio.Range row1 = sheet.getRangeByName('A1:G1');
      row1.merge();
      row1.setText("Kampagnen-√úbersicht");
      row1.cellStyle.bold = true;
      row1.cellStyle.fontSize = 16;
      row1.cellStyle.hAlign = xlsio.HAlignType.center;

      final xlsio.Range row2 = sheet.getRangeByName('A2:G2');
      row2.merge();
      row2.setText("Lenzerheide Marketing-Support AG");
      row2.cellStyle.bold = true;
      row2.cellStyle.fontSize = 12;
      row2.cellStyle.hAlign = xlsio.HAlignType.center;

      final xlsio.Range row3 = sheet.getRangeByName('A3:G3');
      row3.merge();
      row3.setText("GJ ${DateTime.now().year}/${DateTime.now().year + 1}");
      row3.cellStyle.bold = true;
      row3.cellStyle.fontSize = 12;
      row3.cellStyle.hAlign = xlsio.HAlignType.center;

      // Table headers
      int headerRow = 4;
      final List<String> headers = [
        "Name",
        "Startdatum",
        "Enddatum",
        "Budget (CHF)",
        "Kostenstelle",
        "Meta-Konto"
      ];
      for (int col = 0; col < headers.length; col++) {
        final cell = sheet.getRangeByIndex(headerRow, col + 1);
        cell.setText(headers[col]);
        cell.cellStyle.bold = true;
        cell.cellStyle.fontColor = '#FFFFFF';
        cell.cellStyle.backColor = '#F2213B';
        cell.cellStyle.hAlign = xlsio.HAlignType.center;
      }

      int dataStartRow = 5;
      final campaignsForMonth = groupedCampaigns[monthYear]!;
      debugPrint(
          "Verarbeite ${campaignsForMonth.length} Kampagnen f√ºr $monthYear...");

      // Write each campaign to a new row
      for (int i = 0; i < campaignsForMonth.length; i++) {
        final c = campaignsForMonth[i];
        final rowIndex = dataStartRow + i;
        sheet.getRangeByIndex(rowIndex, 1).setText(c.name);
        sheet.getRangeByIndex(rowIndex, 2).setText(
            "${c.startDate.year}-${c.startDate.month.toString().padLeft(2, '0')}-${c.startDate.day.toString().padLeft(2, '0')}");
        sheet.getRangeByIndex(rowIndex, 3).setText(
            "${c.endDate.year}-${c.endDate.month.toString().padLeft(2, '0')}-${c.endDate.day.toString().padLeft(2, '0')}");
        sheet.getRangeByIndex(rowIndex, 4).setNumber(c.adBudget);
        sheet.getRangeByIndex(rowIndex, 5).setText(c.costCenter);
        sheet.getRangeByIndex(rowIndex, 6).setText(c.metaAccount);
      }

      // Auto-fit columns
      for (int i = 1; i <= 6; i++) {
        sheet.autoFitColumn(i);
      }

      // Ensure directory
      final dir = Directory(await AppConstants.getExportPath()
);
      if (!dir.existsSync()) {
        dir.createSync(recursive: true);
      }

      final file = File(filePath);
      await _lock.synchronized(() async {
        if (file.existsSync()) {
          debugPrint(
              "üìÑ Datei existiert bereits, f√ºhre Aktualisierung durch...");
        }
        final bytes = workbook.saveAsStream();
        debugPrint("Speichere Datei: $filePath");
        await file.writeAsBytes(bytes);
        debugPrint("Kampagnen exportiert nach: $filePath");
      });
      workbook.dispose();
    }
  }
}
